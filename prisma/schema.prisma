generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String   @unique
  password  String   
  createdAt DateTime @default(now())
}

model Aluno {
  id           Int      @id @default(autoincrement())
  name         String
  emailMae     String?
  emailPai     String?
  telefoneMae  String?
  telefonePai  String?
  endereco     String?
  observacoes  String?
  docRg        String?   // caminho do arquivo
  docCertidao  String?   // caminho do arquivo
  docContrato  String?   // caminho do arquivo
  createdAt    DateTime @default(now())
  boletins              Boletim[]
  relatoriosDescritivos RelatorioDescritivo[]
  turmas       AlunoNaTurma[] @relation("AlunoNasTurmas")
  avaliacoesIndicadores AvaliacaoIndicadorAluno[]  // <== ADICIONADO
}

model Disciplina {
  id           Int      @id @default(autoincrement())
  nome         String
  etapa        String
  cargaHoraria Int?
  professores  ProfessorNaTurma[]
  boletins     Boletim[]
  indicadoresAvaliativos IndicadorAvaliativo[]  // <== ADICIONADO
  notasAvaliativas       NotaAvaliativa[]       // <== ADICIONADO
}

model Turma {
  id            Int                @id @default(autoincrement())
  nome          String
  turno         String
  anoLetivo     Int
  alunos        AlunoNaTurma[]
  professores   ProfessorNaTurma[]
  relatorios    RelatorioDescritivo[]
  boletins      Boletim[]
  indicadoresAvaliativos IndicadorAvaliativo[]  // <== ADICIONADO
}

model AlunoNaTurma {
  id        Int   @id @default(autoincrement())
  aluno     Aluno @relation("AlunoNasTurmas", fields: [alunoId], references: [id])
  alunoId   Int
  turma     Turma @relation(fields: [turmaId], references: [id])
  turmaId   Int
  anoLetivo Int
}

model Professor {
  id              Int                @id @default(autoincrement())
  nome            String
  email           String             @unique
  senhaHasheada   String
  cargo           String
  turmas          ProfessorNaTurma[]
}

model ProfessorNaTurma {
  id           Int        @id @default(autoincrement())
  professor    Professor  @relation(fields: [professorId], references: [id])
  professorId  Int
  turma        Turma      @relation(fields: [turmaId], references: [id])
  turmaId      Int
  disciplina   Disciplina @relation(fields: [disciplinaId], references: [id])
  disciplinaId Int
}

model Boletim {
  id              Int        @id @default(autoincrement())
  aluno           Aluno      @relation(fields: [alunoId], references: [id])
  alunoId         Int
  disciplina      Disciplina @relation(fields: [disciplinaId], references: [id])
  disciplinaId    Int
  turma           Turma      @relation(fields: [turmaId], references: [id])
  turmaId         Int
  notaAvaliacao1  Float?
  notaAvaliacao2  Float?
  notaAvaliacao3  Float?
  notaRecuperacao Float?
  notaTrabalho    Float?
  faltas          Int?
  mediaFinal      Float?
  observacoes     String?
  createdAt       DateTime   @default(now())
}

model RelatorioDescritivo {
  id        Int   @id @default(autoincrement())
  aluno     Aluno @relation(fields: [alunoId], references: [id])
  alunoId   Int
  turma     Turma @relation(fields: [turmaId], references: [id])
  turmaId   Int
  anoLetivo Int
  texto     String
}

model IndicadorAvaliativo {
  id          Int     @id @default(autoincrement())
  descricao   String
  tipo        String  // 'habilidade', 'postura', 'bncc', etc.
  anoLetivo   Int
  periodo     Int
  disciplina  Disciplina @relation(fields: [disciplinaId], references: [id])
  disciplinaId Int
  turma       Turma     @relation(fields: [turmaId], references: [id])
  turmaId     Int
  ativo       Boolean   @default(true)
  avaliacoes  AvaliacaoIndicadorAluno[]  // <== ADICIONADO
}

model NotaAvaliativa {
  id            Int     @id @default(autoincrement())
  letra         String  // A, B, C, D...
  valor         Float
  tipo          String  // 'habilidade', 'postura', etc.
  anoLetivo     Int
  disciplina    Disciplina @relation(fields: [disciplinaId], references: [id])
  disciplinaId  Int
  ativo         Boolean @default(true)
  avaliacoes    AvaliacaoIndicadorAluno[]  // <== ADICIONADO
}

model AvaliacaoIndicadorAluno {
  id              Int     @id @default(autoincrement())
  aluno           Aluno   @relation(fields: [alunoId], references: [id])
  alunoId         Int
  indicador       IndicadorAvaliativo @relation(fields: [indicadorId], references: [id])
  indicadorId     Int
  nota            NotaAvaliativa @relation(fields: [notaId], references: [id])
  notaId          Int
  observacaoExtra String?
}

model Cargo {
  id           Int           @id @default(autoincrement())
  nome         String
  funcionarios Funcionario[]
}

model Funcionario {
  id                 Int               @id @default(autoincrement())
  nome               String
  dataContratacao    DateTime
  cargoId            Int
  cargo              Cargo             @relation(fields: [cargoId], references: [id])
  
  experienciaPontos  Int               // inserido pelo RH manualmente
  formacaoPontos     Int               // inserido pelo RH manualmente
  inglesPontos       Int               // inserido pelo RH manualmente

  classificacao       String           // preenchido automaticamente (junior, pleno, sÃªnior)
  pontosTotais        Int              // calculado automaticamente

  folhasPagamento     FolhaPagamento[]
}

model FolhaPagamento {
  id             Int          @id @default(autoincrement())
  funcionarioId  Int
  funcionario    Funcionario  @relation(fields: [funcionarioId], references: [id])

  mesReferencia  Int  // exemplo: 07
  anoReferencia  Int
  salarioBruto   Float
  descontos      Float
  salarioLiquido Float
  criadoEm       DateTime   @default(now())
}


